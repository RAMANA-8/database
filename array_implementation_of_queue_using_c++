#include<bits/stdc++.h> // For using exit()

using namespace std; // Allows us to avoid writing std::cout, std::cin, etc.

class queue {
    int queue1[5];  // Fixed size queue
    int rear, front;  // Rear and front pointers

public:
    // Constructor initializes front and rear to -1
    queue() {
        rear = -1;
        front = -1;
    }

    // Insert element into the queue
    void insert(int x) {
        // Check for queue overflow
        if(rear >= 4) {  // Fixed condition (rear >= 4 for 5 elements)
            cout << "Queue overflow\n";
            front = rear = -1;  // Reset the queue
            return;
        }
        queue1[++rear] = x;  // Increment rear and insert the element
        cout << "Inserted " << x << endl;
    }

    // Delete element from the queue
    void delet() {
        // Check for queue underflow
        if(front == rear) {
            cout << "Queue underflow\n";
            return;
        }
        cout << "Deleted " << queue1[++front] << endl;  // Increment front and delete the element
    }

    // Display elements in the queue
    void display() {
        // If the queue is empty
        if(rear == front) {
            cout << "Queue is empty\n";
            return;
        }
        // Loop through the queue to display elements
        for(int i = front + 1; i <= rear; i++)
            cout << queue1[i] << " ";
        cout << endl;
    }
};

// Main function
int main() {
    int ch;  // Variable to store choice
    queue qu;  // Create an object of the queue class

    // Infinite loop for menu-driven program
    while(1) {
        // Menu options
        cout << "\n1. Insert 2. Delete 3. Display 4. Exit\nEnter your choice: ";
        cin >> ch;

        // Switch-case for different choices
        switch(ch) {
            case 1:
                cout << "Enter the element to insert: ";
                cin >> ch;  // Reusing 'ch' for the element to be inserted
                qu.insert(ch);  // Insert the element
                break;
            case 2:
                qu.delet();  // Call delete function
                break;
            case 3:
                qu.display();  // Display the queue
                break;
            case 4:
                exit(0);  // Exit the program
            default:
                cout << "Invalid choice. Please try again.\n";  // Handle invalid input
        }
    }

    return 0;
}
